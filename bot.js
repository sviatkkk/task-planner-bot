const { Telegraf } = require("telegraf");

const bot = new Telegraf(process.env.BOT_TOKEN);

const { kv } = require('@vercel/kv');

const USE_KV = process.env.USE_KV === 'true';

// In-memory for local dev
let userTasks = {};
let userTimers = {};

// KV functions
async function loadUserTasks(userId) {
  if (!userTasks[userId]) {
    userTasks[userId] = { tasks: [], completed: {}, waitingForTask: false, waitingForUrgency: false, waitingForTaskTimer: false, waitingForRemove: false, waitingForEditIndex: false, waitingForEditText: false, waitingForComplete: false };
  }
  if (USE_KV) {
    const data = await kv.get(`tasks:${userId}`);
    if (data) {
      userTasks[userId] = data;
    }
  }
  return userTasks[userId];
}

async function saveUserTasks(userId) {
  if (USE_KV && userTasks[userId]) {
    await kv.set(`tasks:${userId}`, userTasks[userId]);
  }
}

async function loadUserTimers(userId) {
  if (!userTimers[userId]) {
    userTimers[userId] = { enabled: false, intervalMs: null, label: null, nextGlobalReminder: null, waitingForTimer: false };
  }
  if (USE_KV) {
    const data = await kv.get(`timers:${userId}`);
    if (data) {
      userTimers[userId] = data;
    }
  }
  return userTimers[userId];
}

async function saveUserTimers(userId) {
  if (USE_KV && userTimers[userId]) {
    await kv.set(`timers:${userId}`, userTimers[userId]);
    // Add to active list if enabled
    if (userTimers[userId].enabled) {
      let active = await kv.get('active_timers:list') || [];
      if (!active.includes(userId)) {
        active.push(userId);
        await kv.set('active_timers:list', active);
      }
    }
  }
}

// –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (now loaded on demand)

const EMOJI = {
  header: 'üìù',
  done: '‚úÖ',
  todo: '‚ñ´Ô∏è',
  timer: '‚è∞',
  add: '‚ûï',
  remove: 'üóëÔ∏è',
  reminder: 'üîî',
  urgent: 'üî•',
  general: 'üü¢'
};

function escapeMarkdownV2(str) {
  return str.replace(/([_*[\]()~`>#+-=|{}.!\\])/g, '\\$1');
}

function formatTaskInfo(t, i, done, forMarkdown = false, globalLabel = null, isGeneral = false) {
  const idx = `${i + 1}.`;
  const text = getTaskText(t);
  const label = (t && typeof t === 'object' && t.reminderLabel) ? t.reminderLabel : null;
  const interval = (t && typeof t === 'object' && t.reminderInterval) ? t.reminderInterval : null;
  let timerPart = '';
  let globalPart = '';
  if (label) {
    if (forMarkdown) {
      timerPart = ` ${EMOJI.timer} ${escapeMarkdownV2(label)} ${escapeMarkdownV2('(' + humanizeInterval(interval) + ')' )}`;
    } else {
      timerPart = ` ${EMOJI.timer} ${label} (${humanizeInterval(interval)})`;
    }
  }
  if (isGeneral && globalLabel) {
    if (forMarkdown) {
      globalPart = ` ${escapeMarkdownV2(globalLabel)}`;
    } else {
      globalPart = ` ${globalLabel}`;
    }
  }
  let marker = done ? EMOJI.done : EMOJI.todo;
  if (!done) {
    if (t && t.urgent) marker = EMOJI.urgent;
    else if (isGeneral) marker = EMOJI.general;
  }
  if (forMarkdown) {
    const safeNum = escapeMarkdownV2(idx);
    const safeText = escapeMarkdownV2(text);
    return `${marker} ${safeNum} ${done ? '~' + safeText + '~' : safeText}${timerPart}${globalPart}`;
  }
  return `${marker} ${i + 1}. ${text}${timerPart}${globalPart}`;
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–¥–∞—á
function getTaskText(task) {
  return typeof task === "string" ? task : task.text || "";
}

async function setTaskReminder(userId, taskIndex, intervalMs, ctx, label) {
  const user = await loadUserTasks(userId);
  if (!user) return;
  const task = user.tasks[taskIndex];
  if (!task) return;
  // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π
  clearTaskReminder(task);
  task.reminderInterval = intervalMs;
  if (label) task.reminderLabel = label;
  // Store next reminder timestamp
  task.nextReminder = Date.now() + intervalMs;
  await saveUserTasks(userId);
}

function humanizeInterval(ms) {
  if (!ms) return '';
  const sec = Math.floor(ms / 1000);
  if (sec < 60) return `${sec} —Å–µ–∫.`;
  const min = Math.floor(sec / 60);
  if (min < 60) return `${min} —Ö–≤.`;
  const hr = Math.floor(min / 60);
  if (hr < 24) return `${hr} –≥–æ–¥.`;
  const days = Math.floor(hr / 24);
  return `${days} –¥–Ω.`;
}

// Parse custom time input
function parseCustomTime(input) {
  const trimmed = input.trim().toLowerCase();
  // Check for HH:MM format
  const timeMatch = trimmed.match(/^(\d{1,2}):(\d{2})$/);
  if (timeMatch) {
    const hour = parseInt(timeMatch[1], 10);
    const minute = parseInt(timeMatch[2], 10);
    if (hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59) {
      return { type: 'daily', hour, minute };
    }
  }
  // Check for "—á–µ—Ä–µ–∑ X —Ö–≤–∏–ª–∏–Ω/–≥–æ–¥–∏–Ω"
  const intervalMatch = trimmed.match(/^—á–µ—Ä–µ–∑\s+(\d+)\s+(—Ö–≤–∏–ª–∏–Ω|—Ö–≤–∏–ª–∏–Ω–∏|–≥–æ–¥–∏–Ω|–≥–æ–¥–∏–Ω–∏|—Ö–≤|–≥–æ–¥)$/);
  if (intervalMatch) {
    const num = parseInt(intervalMatch[1], 10);
    const unit = intervalMatch[2];
    let ms;
    if (unit === '—Ö–≤–∏–ª–∏–Ω' || unit === '—Ö–≤–∏–ª–∏–Ω–∏' || unit === '—Ö–≤') {
      ms = num * 60 * 1000;
    } else if (unit === '–≥–æ–¥–∏–Ω' || unit === '–≥–æ–¥–∏–Ω–∏' || unit === '–≥–æ–¥') {
      ms = num * 60 * 60 * 1000;
    }
    if (ms) {
      return { type: 'interval', ms };
    }
  }
  return null;
}

// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≤–∏–¥–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –∑–∞–¥–∞—á—ñ
function clearTaskReminder(task) {
  if (!task) return;
  task.reminderInterval = null;
  task.reminderLabel = null;
  task.reminderSchedule = null;
  task.nextReminder = null;
}

// –¢–∞–π–º–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (now loaded on demand)

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–π–º—ñ–Ω–≥—ñ–≤
const timerOptions = [
  { label: "30 —Å–µ–∫—É–Ω–¥", value: 30 * 1000 },
  { label: "1 —Ö–≤–∏–ª–∏–Ω–∞", value: 60 * 1000 },
  { label: "5 —Ö–≤–∏–ª–∏–Ω", value: 5 * 60 * 1000 },
  { label: "15 —Ö–≤–∏–ª–∏–Ω", value: 15 * 60 * 1000 },
  { label: "30 —Ö–≤–∏–ª–∏–Ω", value: 30 * 60 * 1000 },
  { label: "1 –≥–æ–¥–∏–Ω–∞", value: 60 * 60 * 1000 },
  { label: "2 –≥–æ–¥–∏–Ω–∏", value: 2 * 60 * 60 * 1000 },
  { label: "3 –≥–æ–¥–∏–Ω–∏", value: 3 * 60 * 60 * 1000 },
  { label: "6 –≥–æ–¥–∏–Ω", value: 6 * 60 * 60 * 1000 },
  { label: "10 –≥–æ–¥–∏–Ω", value: 10 * 60 * 60 * 1000 },
  { label: "12 –≥–æ–¥–∏–Ω", value: 12 * 60 * 60 * 1000 },
  { label: "–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É", value: "pick_hour" },
  { label: "–©–æ–¥–Ω—è", value: 24 * 60 * 60 * 1000 }
];

function withFooter(text) {
  const footer = "\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help";
  return text + footer;
}

// –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö)
async function sendTaskList(userId, ctx) {
  const user = await loadUserTasks(userId);
  if (!user || !Array.isArray(user.tasks) || user.tasks.length === 0) {
    ctx.reply(withFooter('–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π.\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    return;
  }
  const ut = await loadUserTimers(userId);
  const globalLabel = ut?.label || null;
  const completed = [];
  const uncompleted = [];
  user.tasks.forEach((t, i) => {
    const done = user.completed && user.completed[i];
    const isGeneral = ut?.enabled && !(t?.urgent) && !(t?.reminderLabel);
    const line = formatTaskInfo(t, i, done, true, globalLabel, isGeneral && !done);
    if (done) completed.push(line); else uncompleted.push(line);
  });
  let msg = 'üìã –°—Ç–∞–Ω –≤–∞—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å:\n';
  if (completed.length) msg += `${EMOJI.done} –í–∏–∫–æ–Ω–∞–Ω—ñ:\n` + completed.join('\n') + '\n';
  if (uncompleted.length) msg += `${EMOJI.todo} –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ:\n` + uncompleted.join('\n');
  ctx.reply(withFooter(msg), { parse_mode: 'MarkdownV2' });
}

// –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ urgent / general timer
async function sendUncompletedListPlain(userId, ctx) {
  const user = await loadUserTasks(userId);
  if (!user || !user.tasks || user.tasks.length === 0) {
    ctx.reply(withFooter('–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π.\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    return;
  }
  const ut = await loadUserTimers(userId);
  const globalLabel = ut?.label || null;
  const lines = [];
  user.tasks.forEach((t, i) => {
    const done = user.completed && user.completed[i];
    if (done) return;
    const isGeneral = ut?.enabled && !(t?.urgent) && !(t?.reminderLabel);
    lines.push(formatTaskInfo(t, i, false, false, globalLabel, isGeneral));
  });
  if (lines.length === 0) {
    ctx.reply(withFooter('–ù–µ–º–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á.'));
    return;
  }
  ctx.reply(withFooter('–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n' + lines.join('\n')));
}

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
bot.action(/task_action:(complete|stop|keep):(\d+)/, async (ctx) => {
  try {
    const action = ctx.match[1];
    const idx = parseInt(ctx.match[2], 10);
    const userId = ctx.from.id;
    const user = await loadUserTasks(userId);
    if (!user || !user.tasks || !user.tasks[idx]) {
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const taskObj = user.tasks[idx];
    if (action === 'complete') {
      if (!user.completed) user.completed = {};
      user.completed[idx] = true;
      if (taskObj) {
        clearTaskReminder(taskObj);
      }
      await saveUserTasks(userId);
      await ctx.editMessageReplyMarkup();
      await ctx.reply(withFooter('–ü–æ–∑–Ω–∞—á–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.'));
      await sendTaskList(userId, ctx);
      await ctx.answerCbQuery('–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ');
    } else if (action === 'stop') {
      if (taskObj) {
        clearTaskReminder(taskObj);
      }
      await saveUserTasks(userId);
      await ctx.editMessageReplyMarkup();
      await ctx.reply(withFooter('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω—É—Ç–∏ ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏ —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ.'));
      await ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
    } else if (action === 'keep') {
      // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ –∑ —Ç–∞–π–º–µ—Ä–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ
      await ctx.answerCbQuery('–ü—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏–º—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏');
      await ctx.reply(withFooter('–î–æ–±—Ä–µ ‚Äî —è –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏–º—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    }
  } catch (err) {
    console.error('action handler error', err);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /list
bot.command("list", async (ctx) => {
  const userId = ctx.from.id;
  await sendTaskList(userId, ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤—ñ—Ç üëã –Ø —Ç–≤—ñ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.");
  ctx.reply("–î–∞–≤–∞–π —Å–ø–µ—Ä—à—É –≤—Å—Ç–∞–Ω–æ–≤–∏–º–æ —Ç–∞–π–º–µ—Ä —è–∫ —á–∞—Å—Ç–æ —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å?\n–û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /timer");
  ctx.reply("–û—Å—å —î –∫–æ–º–∞–Ω–¥–∞ /help, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑ —É—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, —è–∫—ñ —É –º–µ–Ω–µ —î.");
});


// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command("help", (ctx) => {
  ctx.reply(
    "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n" +
      "/add ‚Äì –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/remove ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/edit ‚Äì –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\n" +
      "/complete ‚Äì –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/list ‚Äì –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å\n" +
      "/timer ‚Äì –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /timer (—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º —Ç–µ–∫—Å—Ç—É)
bot.command("timer", async (ctx) => {
  const userId = ctx.from.id;
  // Reset any pending task states to avoid conflicts
  const user = await loadUserTasks(userId);
  user.waitingForTask = false;
  user.waitingForUrgency = false;
  user.waitingForTaskTimer = false;
  user.waitingForRemove = false;
  user.waitingForEditIndex = false;
  user.waitingForEditText = false;
  user.waitingForComplete = false;
  delete user.pendingTaskIndex;
  delete user.editIndex;
  delete user.pendingHourForTask;
  await saveUserTasks(userId);
  let msg = "‚è∞ –û–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n";
  timerOptions.forEach((opt, i) => {
    msg += `${i + 1}. ${opt.label}\n`;
  });
  msg += "\n–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —á–∞—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '16:45' –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ, –∞–±–æ '—á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω' –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É.";
  ctx.reply(msg);
  const ut = await loadUserTimers(userId);
  ut.waitingForTimer = true;
  await saveUserTimers(userId);
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command("add", async (ctx) => {
  const userId = ctx.from.id;
  const user = await loadUserTasks(userId);
  user.waitingForTask = true;
  await saveUserTasks(userId);
  ctx.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.");
});

// –ö–æ–º–∞–Ω–¥–∞ /remove
bot.command("remove", async (ctx) => {
  const userId = ctx.from.id;
  const user = await loadUserTasks(userId);
  if (!user || user.tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:\n${tasksList}`);
  user.waitingForRemove = true;
  await saveUserTasks(userId);
});

// –ö–æ–º–∞–Ω–¥–∞ /edit
bot.command("edit", async (ctx) => {
  const userId = ctx.from.id;
  const user = await loadUserTasks(userId);
  if (!user || user.tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:\n${tasksList}`);
  user.waitingForEditIndex = true;
  await saveUserTasks(userId);
});

// –ö–æ–º–∞–Ω–¥–∞ /complete
bot.command("complete", async (ctx) => {
  const userId = ctx.from.id;
  const user = await loadUserTasks(userId);
  if (!user || user.tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
  const uncompletedIndexes = user.tasks
    .map((_, i) => i)
    .filter(i => !(user.completed && user.completed[i]));
  if (uncompletedIndexes.length === 0) {
    ctx.reply("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ /add.");
    return;
  }
  const tasksList = user.tasks.map((t, i) => {
    const done = user.completed && user.completed[i];
    return formatTaskInfo(t, i, done, true);
  }).join("\n");
  ctx.reply(`‚úÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:\n${tasksList}`, { parse_mode: "MarkdownV2" });
  user.waitingForComplete = true;
  await saveUserTasks(userId);
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (—á–µ–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç—É)
  if (userTasks[userId] && userTasks[userId].waitingForTask) {
    const text = ctx.message.text;
    const user = await loadUserTasks(userId);
    // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ–±'—î–∫—Ç
    const idx = user.tasks.push({ text, urgent: false, reminderId: null, reminderInterval: null }) - 1;
    user.waitingForTask = false;
    user.pendingTaskIndex = idx;
    user.waitingForUrgency = true;
    await saveUserTasks(userId);
    ctx.reply("–ß–∏ –≤–∞–∂–ª–∏–≤–µ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è?\n1. –¢–∞–∫\n2. –ù—ñ (—è–∫—â–æ –Ω—ñ, –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –ø—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–∏–º —Ç–∞–π–º–µ—Ä–æ–º)");
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å
  if (userTasks[userId] && userTasks[userId].waitingForUrgency) {
    const ans = ctx.message.text.trim();
    const user = await loadUserTasks(userId);
    const idx = user.pendingTaskIndex;
    if (ans === '1' || /^—Ç–∞–∫$/i.test(ans)) {
      // –≤–∞–∂–ª–∏–≤–µ ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ
      user.tasks[idx].urgent = true;
      user.waitingForUrgency = false;
      user.waitingForTaskTimer = true;
      await saveUserTasks(userId);
      // –ø–æ–∫–∞–∑—É—î–º–æ –æ–ø—Ü—ñ—ó —Ç–∞–π–º–µ—Ä–∞
      let msg = "–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:\n";
      timerOptions.forEach((opt, i) => { msg += `${i + 1}. ${opt.label}\n`; });
      msg += "\n–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —á–∞—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '16:45' –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ, –∞–±–æ '—á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω' –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É.";
      ctx.reply(msg);
      return;
    }
    // –Ω–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ
    user.waitingForUrgency = false;
    const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
    let msg = `–ó–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}\n–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ /add`;
    const ut = await loadUserTimers(userId);
    if (ut && ut.enabled && ut.label) {
      msg += `\n\n–ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä - ${ut.label};`;
    }
    ctx.reply(withFooter(msg));
    delete user.pendingTaskIndex;
    await saveUserTasks(userId);
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ
  if (userTasks[userId] && userTasks[userId].waitingForTaskTimer) {
    const num = parseInt(ctx.message.text);
    const user = await loadUserTasks(userId);
    const idx = user.pendingTaskIndex;
    if (!isNaN(num) && num >= 1 && num <= timerOptions.length) {
      const ms = timerOptions[num - 1].value;
      const label = timerOptions[num - 1].label;
      if (ms === "pick_hour") {
        // show inline keyboard with hours 0..23
        const keyboard = [];
        for (let r = 0; r < 6; r++) {
          const row = [];
          for (let c = 0; c < 4; c++) {
            const hour = r * 4 + c;
            row.push({ text: (hour.toString().padStart(2, '0') + ':00'), callback_data: `pick_hour:${idx}:${hour}` });
          }
          keyboard.push(row);
        }
        await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', { reply_markup: { inline_keyboard: keyboard } });
        // store pending info
        user.pendingHourForTask = idx;
        await saveUserTasks(userId);
      } else {
        setTaskReminder(userId, idx, ms, ctx, label);
        user.waitingForTaskTimer = false;
        await saveUserTasks(userId);
        const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
        ctx.reply(withFooter(`${EMOJI.reminder} –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timerOptions[num - 1].label}\n–û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}`));
        delete user.pendingTaskIndex;
      }
    } else {
      const parsed = parseCustomTime(ctx.message.text);
      if (parsed) {
        if (parsed.type === 'daily') {
          const task = user.tasks[idx];
          clearTaskReminder(task);
          const now = new Date();
          const next = new Date(now);
          next.setHours(parsed.hour, parsed.minute || 0, 0, 0);
          if (next <= now) next.setDate(next.getDate() + 1);
          task.reminderLabel = `${parsed.hour.toString().padStart(2, '0')}:${(parsed.minute || 0).toString().padStart(2, '0')} (—â–æ–¥–Ω—è)`;
          task.reminderSchedule = { type: 'daily_hour', hour: parsed.hour, minute: parsed.minute || 0 };
          task.nextReminder = next.getTime();
          await saveUserTasks(userId);
          user.waitingForTaskTimer = false;
          const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
          ctx.reply(withFooter(`${EMOJI.reminder} –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${task.reminderLabel}\n–û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}`));
          delete user.pendingTaskIndex;
        } else if (parsed.type === 'interval') {
          const label = humanizeInterval(parsed.ms);
          setTaskReminder(userId, idx, parsed.ms, ctx, label);
          user.waitingForTaskTimer = false;
          await saveUserTasks(userId);
          const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
          ctx.reply(withFooter(`${EMOJI.reminder} –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${label}\n–û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}`));
          delete user.pendingTaskIndex;
        }
      } else {
        ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–π —á–∞—Å.");
      }
    }
    return;
  }
  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForRemove) {
    const num = parseInt(ctx.message.text);
    const user = await loadUserTasks(userId);
    if (isNaN(num) || num < 1 || num > user.tasks.length) {
      ctx.reply(withFooter("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."));
      return;
    }
    const removed = user.tasks.splice(num - 1, 1)[0];
    // –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –æ–±'—î–∫—Ç–æ–º –∑ reminderId
    if (removed && typeof removed === 'object') {
      clearTaskReminder(removed);
    }
    user.waitingForRemove = false;
    await saveUserTasks(userId);
    if (user.tasks.length === 0) {
      ctx.reply(withFooter("–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. –©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è."));
    } else {
  const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(withFooter(`–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n${tasksList}`));
    }
    return;
  }
  // –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForComplete) {
    const num = parseInt(ctx.message.text);
    const user = await loadUserTasks(userId);
    if (isNaN(num) || num < 1 || num > user.tasks.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
      return;
    }
    if (!user.completed) user.completed = {};
    if (user.completed[num - 1]) {
      ctx.reply(withFooter("–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–µ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ."));
      return;
    }
    // clear reminder for completed task if present
    const taskObj = user.tasks[num - 1];
    if (taskObj && typeof taskObj === 'object') {
      clearTaskReminder(taskObj);
    }
    user.completed[num - 1] = true;
    user.waitingForComplete = false;
    await saveUserTasks(userId);
    const tasksList = user.tasks.map((t, i) => {
      const done = user.completed && user.completed[i];
      return formatTaskInfo(t, i, done, true);
    }).join("\n");
  const headerEsc = escapeMarkdownV2("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –û—Å—å –≤–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:");
  const footerEsc = escapeMarkdownV2("\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help");
  ctx.reply(`${headerEsc}\n${tasksList}${footerEsc}`, { parse_mode: 'MarkdownV2' });
    return;
  }
  // –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForEditIndex) {
    const num = parseInt(ctx.message.text);
    const user = await loadUserTasks(userId);
    if (isNaN(num) || num < 1 || num > user.tasks.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
      return;
    }
    user.editIndex = num - 1;
    user.waitingForEditIndex = false;
    user.waitingForEditText = true;
    await saveUserTasks(userId);
    ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:");
    return;
  }
  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForEditText) {
    const user = await loadUserTasks(userId);
    user.tasks[user.editIndex] = ctx.message.text;
    user.waitingForEditText = false;
    delete user.editIndex;
    await saveUserTasks(userId);
  const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(withFooter(`–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—Å—å –≤–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n${tasksList}`));
    return;
  }
  // –í–∏–±—ñ—Ä —Ç–∞–π–º–µ—Ä–∞
  if (userTimers[userId] && userTimers[userId].waitingForTimer) {
    const num = parseInt(ctx.message.text);
    const ut = await loadUserTimers(userId);
    if (!isNaN(num) && num >= 1 && num <= timerOptions.length) {
      const choice = timerOptions[num - 1].value;
      ut.waitingForTimer = false;
      await saveUserTimers(userId);
      if (choice === 'pick_hour') {
        // show inline keyboard with hours 0..23 for global timer
        const keyboard = [];
        for (let r = 0; r < 6; r++) {
          const row = [];
          for (let c = 0; c < 4; c++) {
            const hour = r * 4 + c;
            row.push({ text: hour.toString().padStart(2, '0') + ':00', callback_data: `pick_global_hour:${hour}` });
          }
          keyboard.push(row);
        }
        await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', { reply_markup: { inline_keyboard: keyboard } });
        return;
      }
      setUserReminder(userId, choice, ctx);
      ctx.reply(withFooter(`–¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timerOptions[num - 1].label}`));
    } else {
      const parsed = parseCustomTime(ctx.message.text);
      if (parsed) {
        ut.waitingForTimer = false;
        if (parsed.type === 'daily') {
          // clear existing global schedule
          if (ut.timeoutId) { try { clearTimeout(ut.timeoutId); } catch (e) {} ut.timeoutId = null; }
          if (ut.intervalId) { try { clearInterval(ut.intervalId); } catch (e) {} ut.intervalId = null; }
          // compute next occurrence
          const now = new Date();
          const next = new Date(now);
          next.setHours(parsed.hour, parsed.minute || 0, 0, 0);
          if (next <= now) next.setDate(next.getDate() + 1);
          ut.schedule = { type: 'daily_hour', hour: parsed.hour, minute: parsed.minute || 0 };
          ut.label = `${parsed.hour.toString().padStart(2,'0')}:${(parsed.minute || 0).toString().padStart(2, '0')} (—â–æ–¥–Ω—è)`;
          ut.enabled = true;
          ut.nextGlobalReminder = next.getTime();
          await saveUserTimers(userId);
          ctx.reply(withFooter(`–ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä —â–æ–¥–µ–Ω–Ω–æ –æ ${ut.label} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`));
        } else if (parsed.type === 'interval') {
          setUserReminder(userId, parsed.ms, ctx);
          ctx.reply(withFooter(`–¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${humanizeInterval(parsed.ms)}`));
        }
      } else {
        ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ –∞–±–æ –≤–ª–∞—Å–Ω–∏–π —á–∞—Å.");
        ut.waitingForTimer = true;
        await saveUserTimers(userId);
      }
    }
    return;
  }
  // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è
  ctx.reply(`–í–∏–±–∞—á, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤( –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥ /help`); // bot pls do not change the text in this line
});

// (timer command already registered earlier)

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
bot.action(/pick_global_hour:(\d+)/, async (ctx) => {
  try {
    const hour = parseInt(ctx.match[1], 10);
    const userId = ctx.from.id;
    const ut = await loadUserTimers(userId);
    // clear existing global schedule
    if (ut.timeoutId) { try { clearTimeout(ut.timeoutId); } catch (e) {} ut.timeoutId = null; }
    if (ut.intervalId) { try { clearInterval(ut.intervalId); } catch (e) {} ut.intervalId = null; }
    // compute next occurrence
    const now = new Date();
    const next = new Date(now);
    next.setHours(hour, 0, 0, 0);
    if (next <= now) next.setDate(next.getDate() + 1);
    ut.schedule = { type: 'daily_hour', hour };
    ut.label = `${hour.toString().padStart(2,'0')}:00 (—â–æ–¥–Ω—è)`;
    ut.enabled = true;
    ut.nextGlobalReminder = next.getTime();
    await saveUserTimers(userId);
    await ctx.editMessageReplyMarkup();
    await ctx.reply(withFooter(`–ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä —â–æ–¥–µ–Ω–Ω–æ –æ ${hour.toString().padStart(2,'0')}:00 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`));
    await ctx.answerCbQuery('–ì–æ–¥–∏–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (err) {
    console.error('pick_global_hour handler err', err);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º–µ—Ä–∞
async function setUserReminder(userId, intervalMs, ctx) {
  const ut = await loadUserTimers(userId);
  // clear existing
  if (ut.intervalId) {
    try { clearInterval(ut.intervalId); } catch (e) {}
    ut.intervalId = null;
  }
  if (ut.timeoutId) {
    try { clearTimeout(ut.timeoutId); } catch (e) {}
    ut.timeoutId = null;
  }
  ut.intervalMs = intervalMs;
  ut.enabled = true;
  ut.label = humanizeInterval(intervalMs) || 'custom';
  ut.nextGlobalReminder = Date.now() + intervalMs;
  await saveUserTimers(userId);
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
bot.action(/pick_hour:(\d+):(\d+)/, async (ctx) => {
  try {
    const taskIdx = parseInt(ctx.match[1], 10);
    const hour = parseInt(ctx.match[2], 10);
    const userId = ctx.from.id;
    const user = await loadUserTasks(userId);
    if (!user || !user.tasks || !user.tasks[taskIdx]) {
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const task = user.tasks[taskIdx];
    // clear existing
    clearTaskReminder(task);
    // compute next occurrence
    const now = new Date();
    const next = new Date(now);
    next.setHours(hour, 0, 0, 0);
    if (next <= now) next.setDate(next.getDate() + 1);
    task.reminderLabel = `${hour.toString().padStart(2, '0')}:00 (—â–æ–¥–Ω—è)`;
    task.reminderSchedule = { type: 'daily_hour', hour };
    task.nextReminder = next.getTime();
    await saveUserTasks(userId);
    await ctx.editMessageReplyMarkup();
    await ctx.reply(withFooter(`–¢–∞–π–º–µ—Ä —â–æ–¥–µ–Ω–Ω–æ –æ ${hour.toString().padStart(2, '0')}:00 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`));
    await ctx.answerCbQuery('–ì–æ–¥–∏–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (err) {
    console.error('pick_hour handler err', err);
  }
});

module.exports = {
  bot,
  userTasks,
  userTimers,
  setUserReminder,
  sendTaskList,
  sendUncompletedListPlain,
  clearTaskReminder,
  setTaskReminder
};
