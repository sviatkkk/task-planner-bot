require("dotenv").config();
const { Telegraf } = require("telegraf");

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤ MarkdownV2
function escapeMarkdownV2(text) {
  if (text === null || text === undefined) return "";
  const s = String(text);
  return s.replace(/([_\*\[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userTasks = {};

const EMOJI = {
  header: 'üìù',
  done: '‚úÖ',
  todo: '‚ñ´Ô∏è',
  timer: '‚è∞',
  add: '‚ûï',
  remove: 'üóëÔ∏è',
  reminder: 'üîî',
  urgent: 'üî•',
  general: 'üü¢'
};

function formatTaskInfo(t, i, done, forMarkdown = false) {
  const idx = `${i + 1}.`;
  const text = getTaskText(t);
  const label = (t && typeof t === 'object' && t.reminderLabel) ? t.reminderLabel : null;
  const interval = (t && typeof t === 'object' && t.reminderInterval) ? t.reminderInterval : null;
  if (forMarkdown) {
    const safeNum = escapeMarkdownV2(idx);
    const safeText = escapeMarkdownV2(text);
    const timerPart = label ? ` ${EMOJI.timer} ${escapeMarkdownV2(label)} ${escapeMarkdownV2('(' + humanizeInterval(interval) + ')' )}` : '';
    return `${done ? EMOJI.done : EMOJI.todo} ${safeNum} ${done ? '~' + safeText + '~' : safeText}${timerPart}`;
  }
  const timerPart = label ? ` ${EMOJI.timer} ${label} (${humanizeInterval(interval)})` : '';
  return `${done ? EMOJI.done : EMOJI.todo} ${i + 1}. ${text}${timerPart}`;
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–¥–∞—á
function getTaskText(task) {
  return typeof task === "string" ? task : task.text || "";
}

function setTaskReminder(userId, taskIndex, intervalMs, ctx, label) {
  const user = userTasks[userId];
  if (!user) return;
  const task = user.tasks[taskIndex];
  if (!task) return;
  // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π
  if (task.reminderId) clearInterval(task.reminderId);
  task.reminderInterval = intervalMs;
  if (label) task.reminderLabel = label;
  // reminderLabel will be set by caller when possible
  task.reminderId = setInterval(() => {
    const text = `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${getTaskText(task)}\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help`;
    ctx.telegram.sendMessage(userId, text, {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ', callback_data: `task_action:complete:${taskIndex}` },
          { text: '‚è∏Ô∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data: `task_action:stop:${taskIndex}` },
          { text: 'üîÅ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –¥–∞–ª—ñ', callback_data: `task_action:keep:${taskIndex}` }
        ]]
      }
    });
  }, intervalMs);
}

function humanizeInterval(ms) {
  if (!ms) return '';
  const sec = Math.floor(ms / 1000);
  if (sec < 60) return `${sec} —Å–µ–∫.`;
  const min = Math.floor(sec / 60);
  if (min < 60) return `${min} —Ö–≤.`;
  const hr = Math.floor(min / 60);
  if (hr < 24) return `${hr} –≥–æ–¥.`;
  const days = Math.floor(hr / 24);
  return `${days} –¥–Ω.`;
}

// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≤–∏–¥–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –∑–∞–¥–∞—á—ñ
function clearTaskReminder(task) {
  if (!task) return;
  if (task.reminderId) {
    try { clearInterval(task.reminderId); } catch (e) {}
    task.reminderId = null;
  }
  if (task.reminderTimeoutId) {
    try { clearTimeout(task.reminderTimeoutId); } catch (e) {}
    task.reminderTimeoutId = null;
  }
  if (task.reminderIntervalId) {
    try { clearInterval(task.reminderIntervalId); } catch (e) {}
    task.reminderIntervalId = null;
  }
  task.reminderInterval = null;
  task.reminderLabel = null;
  task.reminderSchedule = null;
}

// –¢–∞–π–º–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userTimers = {};

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–π–º—ñ–Ω–≥—ñ–≤
const timerOptions = [
  { label: "1 —Ö–≤–∏–ª–∏–Ω–∞", value: 60 * 1000 },
  { label: "1 –≥–æ–¥–∏–Ω–∞", value: 60 * 60 * 1000 },
  { label: "3 –≥–æ–¥–∏–Ω–∏", value: 3 * 60 * 60 * 1000 },
  { label: "10 –≥–æ–¥–∏–Ω", value: 10 * 60 * 60 * 1000 },
  { label: "–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É", value: "pick_hour" },
  { label: "–©–æ–¥–Ω—è", value: 24 * 60 * 60 * 1000 }
];

function withFooter(text) {
  const footer = "\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help";
  return text + footer;
}

// –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö)
function sendTaskList(userId, ctx) {
  const user = userTasks[userId];
  if (!user || !Array.isArray(user.tasks) || user.tasks.length === 0) {
    ctx.reply(withFooter('–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π.\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    return;
  }
  const completed = [];
  const uncompleted = [];
  user.tasks.forEach((t, i) => {
    const done = user.completed && user.completed[i];
    let line = formatTaskInfo(t, i, done, true);
    // —è–∫—â–æ —î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–¥–∞—á–∞ –Ω–µ urgent —ñ –Ω–µ –º–∞—î –≤–ª–∞—Å–Ω–æ–≥–æ reminderLabel
    const isGeneral = userTimers[userId] && userTimers[userId].enabled && !(t && t.urgent) && !(t && t.reminderLabel);
    if (!done && isGeneral) {
      line += ` ${escapeMarkdownV2('(–ø—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–∏–º —Ç–∞–π–º–µ—Ä–æ–º)')}`;
    }
    if (done) completed.push(line); else uncompleted.push(line);
  });
  let msg = 'üìã –°—Ç–∞–Ω –≤–∞—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å:\n';
  if (completed.length) msg += `${EMOJI.done} –í–∏–∫–æ–Ω–∞–Ω—ñ:\n` + completed.join('\n') + '\n';
  if (uncompleted.length) msg += `${EMOJI.todo} –ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ:\n` + uncompleted.join('\n');
  ctx.reply(withFooter(msg), { parse_mode: 'MarkdownV2' });
}

// –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ urgent / general timer
function sendUncompletedListPlain(userId, ctx) {
  const user = userTasks[userId];
  if (!user || !user.tasks || user.tasks.length === 0) {
    ctx.reply(withFooter('–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π.\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    return;
  }
  const lines = [];
  user.tasks.forEach((t, i) => {
    const done = user.completed && user.completed[i];
    if (done) return;
    const isGeneral = userTimers[userId] && userTimers[userId].enabled && !(t && t.urgent);
    const marker = t && t.urgent ? EMOJI.urgent : (isGeneral ? EMOJI.general : EMOJI.todo);
    const txt = getTaskText(t);
    const timerInfo = (t && t.reminderLabel) ? ` ${EMOJI.timer} ${t.reminderLabel}` : '';
    lines.push(`${marker} ${i + 1}. ${txt}${timerInfo}`);
  });
  if (lines.length === 0) {
    ctx.reply(withFooter('–ù–µ–º–∞ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á.'));
    return;
  }
  ctx.reply(withFooter('–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ:\n' + lines.join('\n')));
}

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
bot.action(/task_action:(complete|stop):(\d+)/, async (ctx) => {
  try {
    const action = ctx.match[1];
    const idx = parseInt(ctx.match[2], 10);
    const userId = ctx.from.id;
    const user = userTasks[userId];
    if (!user || !user.tasks || !user.tasks[idx]) {
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const taskObj = user.tasks[idx];
    if (action === 'complete') {
      if (!user.completed) user.completed = {};
      user.completed[idx] = true;
      if (taskObj) {
        clearTaskReminder(taskObj);
      }
      await ctx.editMessageReplyMarkup();
      await ctx.reply(withFooter('–ü–æ–∑–Ω–∞—á–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.'));
      sendTaskList(userId, ctx);
      await ctx.answerCbQuery('–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ');
    } else if (action === 'stop') {
      if (taskObj) {
        clearTaskReminder(taskObj);
      }
      await ctx.editMessageReplyMarkup();
      await ctx.reply(withFooter('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à –∑–Ω–æ–≤—É —É–≤—ñ–º–∫–Ω—É—Ç–∏ ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏ —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ.'));
      await ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
    } else if (action === 'keep') {
      // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ –∑ —Ç–∞–π–º–µ—Ä–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ
      await ctx.answerCbQuery('–ü—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏–º—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏');
      await ctx.reply(withFooter('–î–æ–±—Ä–µ ‚Äî —è –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏–º—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è.'));
    }
  } catch (err) {
    console.error('action handler error', err);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /list
bot.command("list", (ctx) => {
  const userId = ctx.from.id;
  sendTaskList(userId, ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤—ñ—Ç üëã –Ø —Ç–≤—ñ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.");
  ctx.reply("–û—Å—å —î –∫–æ–º–∞–Ω–¥–∞ /help, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑ —É—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, —è–∫—ñ —É –º–µ–Ω–µ —î.");
});


// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command("help", (ctx) => {
  ctx.reply(
    "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n" +
      "/add ‚Äì –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/remove ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/edit ‚Äì –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\n" +
      "/complete ‚Äì –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
      "/list ‚Äì –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å\n" +
      "/timer ‚Äì –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /timer (—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º —Ç–µ–∫—Å—Ç—É)
bot.command("timer", (ctx) => {
  const userId = ctx.from.id;
  let msg = "‚è∞ –û–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n";
  timerOptions.forEach((opt, i) => {
    msg += `${i + 1}. ${opt.label}\n`;
  });
  ctx.reply(msg);
  userTimers[userId] = userTimers[userId] || {};
  userTimers[userId].waitingForTimer = true;
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command("add", (ctx) => {
  const userId = ctx.from.id;
  if (!userTasks[userId]) userTasks[userId] = { tasks: [], waitingForTask: false };
  userTasks[userId].waitingForTask = true;
  ctx.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.");
});

// –ö–æ–º–∞–Ω–¥–∞ /remove
bot.command("remove", (ctx) => {
  const userId = ctx.from.id;
  if (!userTasks[userId] || userTasks[userId].tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  const tasksList = userTasks[userId].tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:\n${tasksList}`);
  userTasks[userId].waitingForRemove = true;
});

// –ö–æ–º–∞–Ω–¥–∞ /edit
bot.command("edit", (ctx) => {
  const userId = ctx.from.id;
  if (!userTasks[userId] || userTasks[userId].tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  const tasksList = userTasks[userId].tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:\n${tasksList}`);
  userTasks[userId].waitingForEditIndex = true;
});

// –ö–æ–º–∞–Ω–¥–∞ /complete
bot.command("complete", (ctx) => {
  const userId = ctx.from.id;
  if (!userTasks[userId] || userTasks[userId].tasks.length === 0) {
    ctx.reply("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. \n–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è.");
    return;
  }
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
  const uncompletedIndexes = userTasks[userId].tasks
    .map((_, i) => i)
    .filter(i => !(userTasks[userId].completed && userTasks[userId].completed[i]));
  if (uncompletedIndexes.length === 0) {
    ctx.reply("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ /add.");
    return;
  }
  const tasksList = userTasks[userId].tasks.map((t, i) => {
    const done = userTasks[userId].completed && userTasks[userId].completed[i];
    return formatTaskInfo(t, i, done, true);
  }).join("\n");
  ctx.reply(`‚úÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:\n${tasksList}`, { parse_mode: "MarkdownV2" });
  userTasks[userId].waitingForComplete = true;
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è

bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (—á–µ–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç—É)
  if (userTasks[userId] && userTasks[userId].waitingForTask) {
    const text = ctx.message.text;
    const user = userTasks[userId];
    // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ–±'—î–∫—Ç
    const idx = user.tasks.push({ text, urgent: false, reminderId: null, reminderInterval: null }) - 1;
    user.waitingForTask = false;
    user.pendingTaskIndex = idx;
    user.waitingForUrgency = true;
    ctx.reply("–ß–∏ –≤–∞–∂–ª–∏–≤–µ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è?\n1. –¢–∞–∫\n2. –ù—ñ (—è–∫—â–æ –Ω—ñ, –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –ø—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–∏–º —Ç–∞–π–º–µ—Ä–æ–º)");
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å
  if (userTasks[userId] && userTasks[userId].waitingForUrgency) {
    const ans = ctx.message.text.trim();
    const user = userTasks[userId];
    const idx = user.pendingTaskIndex;
    if (ans === '1' || /^—Ç–∞–∫$/i.test(ans)) {
      // –≤–∞–∂–ª–∏–≤–µ ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ
      user.tasks[idx].urgent = true;
      user.waitingForUrgency = false;
      user.waitingForTaskTimer = true;
      // –ø–æ–∫–∞–∑—É—î–º–æ –æ–ø—Ü—ñ—ó —Ç–∞–π–º–µ—Ä–∞
      let msg = "–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:\n";
      timerOptions.forEach((opt, i) => { msg += `${i + 1}. ${opt.label}\n`; });
      ctx.reply(msg);
      return;
    }
    // –Ω–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ
    user.waitingForUrgency = false;
  const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(withFooter(`–ó–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}\n–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ /add`));
    delete user.pendingTaskIndex;
    return;           
  }

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ
  if (userTasks[userId] && userTasks[userId].waitingForTaskTimer) {
    const num = parseInt(ctx.message.text);
    const user = userTasks[userId];
    if (isNaN(num) || num < 1 || num > timerOptions.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞.");
      return;
    }
    const idx = user.pendingTaskIndex;
    const ms = timerOptions[num - 1].value;
    const label = timerOptions[num - 1].label;
    if (ms === "pick_hour") {
      // show inline keyboard with hours 0..23
      const keyboard = [];
      for (let r = 0; r < 6; r++) {
        const row = [];
        for (let c = 0; c < 4; c++) {
          const hour = r * 4 + c;
          row.push({ text: (hour.toString().padStart(2, '0') + ':00'), callback_data: `pick_hour:${idx}:${hour}` });
        }
        keyboard.push(row);
      }
      await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', { reply_markup: { inline_keyboard: keyboard } });
      // store pending info
      user.pendingHourForTask = idx;
    } else {
      setTaskReminder(userId, idx, ms, ctx, label);
      user.waitingForTaskTimer = false;
      const tasksList = user.tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
      ctx.reply(withFooter(`${EMOJI.reminder} –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timerOptions[num - 1].label}\n–û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n${tasksList}`));
      delete user.pendingTaskIndex;
      return;
    }
    return;
  }
  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForRemove) {
    const num = parseInt(ctx.message.text);
    if (isNaN(num) || num < 1 || num > userTasks[userId].tasks.length) {
      ctx.reply(withFooter("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."));
      return;
    }
    const removed = userTasks[userId].tasks.splice(num - 1, 1)[0];
    // –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –æ–±'—î–∫—Ç–æ–º –∑ reminderId
    if (removed && typeof removed === 'object') {
      clearTaskReminder(removed);
    }
    userTasks[userId].waitingForRemove = false;
    if (userTasks[userId].tasks.length === 0) {
      ctx.reply(withFooter("–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –ø—É—Å—Ç–∏–π. –©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /add —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è."));
    } else {
  const tasksList = userTasks[userId].tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(withFooter(`–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n${tasksList}`));
    }
    return;
  }
  // –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForComplete) {
    const num = parseInt(ctx.message.text);
    if (isNaN(num) || num < 1 || num > userTasks[userId].tasks.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
      return;
    }
    if (!userTasks[userId].completed) userTasks[userId].completed = {};
    if (userTasks[userId].completed[num - 1]) {
      ctx.reply(withFooter("–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–µ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ."));
      return;
    }
    // clear reminder for completed task if present
    const taskObj = userTasks[userId].tasks[num - 1];
    if (taskObj && typeof taskObj === 'object' && taskObj.reminderId) {
      clearInterval(taskObj.reminderId);
      taskObj.reminderId = null;
      taskObj.reminderInterval = null;
    }
    userTasks[userId].completed[num - 1] = true;
    userTasks[userId].waitingForComplete = false;
    const tasksList = userTasks[userId].tasks.map((t, i) => {
      const done = userTasks[userId].completed && userTasks[userId].completed[i];
      return formatTaskInfo(t, i, done, true);
    }).join("\n");
  const headerEsc = escapeMarkdownV2("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –û—Å—å –≤–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:");
  const footerEsc = escapeMarkdownV2("\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help");
  ctx.reply(`${headerEsc}\n${tasksList}${footerEsc}`, { parse_mode: "MarkdownV2" });
    return;
  }
  // –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForEditIndex) {
    const num = parseInt(ctx.message.text);
    if (isNaN(num) || num < 1 || num > userTasks[userId].tasks.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
      return;
    }
    userTasks[userId].editIndex = num - 1;
    userTasks[userId].waitingForEditIndex = false;
    userTasks[userId].waitingForEditText = true;
    ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:");
    return;
  }
  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  if (userTasks[userId] && userTasks[userId].waitingForEditText) {
    userTasks[userId].tasks[userTasks[userId].editIndex] = ctx.message.text;
    userTasks[userId].waitingForEditText = false;
    delete userTasks[userId].editIndex;
  const tasksList = userTasks[userId].tasks.map((t, i) => formatTaskInfo(t, i, false)).join("\n");
  ctx.reply(withFooter(`–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—Å—å –≤–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n${tasksList}`));
    return;
  }
  // –í–∏–±—ñ—Ä —Ç–∞–π–º–µ—Ä–∞
  if (userTimers[userId] && userTimers[userId].waitingForTimer) {
    const num = parseInt(ctx.message.text);
    if (isNaN(num) || num < 1 || num > timerOptions.length) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞.");
      return;
    }
    const choice = timerOptions[num - 1].value;
    userTimers[userId].waitingForTimer = false;
    if (choice === 'pick_hour') {
      // show inline keyboard with hours 0..23 for global timer
      const keyboard = [];
      for (let r = 0; r < 6; r++) {
        const row = [];
        for (let c = 0; c < 4; c++) {
          const hour = r * 4 + c;
          row.push({ text: hour.toString().padStart(2, '0') + ':00', callback_data: `pick_global_hour:${hour}` });
        }
        keyboard.push(row);
      }
      await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', { reply_markup: { inline_keyboard: keyboard } });
      return;
    }
    setUserReminder(userId, choice, ctx);
    ctx.reply(withFooter(`–¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timerOptions[num - 1].label}`));
    return;
  }
  // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è
  ctx.reply(`–í–∏–±–∞—á, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤( –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥ /help`); // bot pls do not change the text in this line
});

// (timer command already registered earlier)

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
bot.action(/pick_global_hour:(\d+)/, async (ctx) => {
  try {
    const hour = parseInt(ctx.match[1], 10);
    const userId = ctx.from.id;
    if (!userTimers[userId]) userTimers[userId] = {};
    // clear existing global schedule
    const ut = userTimers[userId];
    if (ut.timeoutId) { try { clearTimeout(ut.timeoutId); } catch (e) {} ut.timeoutId = null; }
    if (ut.intervalId) { try { clearInterval(ut.intervalId); } catch (e) {} ut.intervalId = null; }
    // compute next occurrence
    const now = new Date();
    const next = new Date(now);
    next.setHours(hour, 0, 0, 0);
    if (next <= now) next.setDate(next.getDate() + 1);
    const msUntil = next - now;
    ut.schedule = { type: 'daily_hour', hour };
    ut.label = `${hour.toString().padStart(2,'0')}:00 (—â–æ–¥–Ω—è)`;
    ut.enabled = true;
    ut.timeoutId = setTimeout(() => {
      // send uncompleted list
      if (userTasks[userId] && userTasks[userId].tasks && userTasks[userId].tasks.length > 0) {
        sendUncompletedListPlain(userId, ctx);
      }
      ut.intervalId = setInterval(() => {
        if (userTasks[userId] && userTasks[userId].tasks && userTasks[userId].tasks.length > 0) {
          sendUncompletedListPlain(userId, ctx);
        }
      }, 24 * 60 * 60 * 1000);
    }, msUntil);
    await ctx.editMessageReplyMarkup();
    await ctx.reply(withFooter(`–ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä —â–æ–¥–µ–Ω–Ω–æ –æ ${hour.toString().padStart(2,'0')}:00 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`));
    await ctx.answerCbQuery('–ì–æ–¥–∏–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (err) {
    console.error('pick_global_hour handler err', err);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–π–º–µ—Ä–∞
function setUserReminder(userId, intervalMs, ctx) {
  // –Ø–∫—â–æ –≤–∂–µ —î —Ç–∞–π–º–µ—Ä ‚Äî –æ—á–∏—â–∞—î–º–æ
  if (!userTimers[userId]) userTimers[userId] = {};
  if (userTimers[userId].intervalId) {
    try { clearInterval(userTimers[userId].intervalId); } catch (e) {}
  }
  userTimers[userId].intervalMs = intervalMs;
  userTimers[userId].enabled = true;
  // store readable label
  userTimers[userId].label = humanizeInterval(intervalMs) || 'custom';
  userTimers[userId].intervalId = setInterval(() => {
    if (userTasks[userId] && userTasks[userId].tasks && userTasks[userId].tasks.length > 0) {
      // send compact uncompleted list
      const lines = [];
      userTasks[userId].tasks.forEach((t, i) => {
        const done = userTasks[userId].completed && userTasks[userId].completed[i];
        if (done) return;
        // don't include tasks that have their own urgent reminders if they are marked urgent
        const marker = t && t.urgent ? EMOJI.urgent : EMOJI.general;
        lines.push(`${marker} ${i + 1}. ${getTaskText(t)}`);
      });
      if (lines.length > 0) {
        ctx.telegram.sendMessage(userId, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (${userTimers[userId].label})\n` + lines.join('\n'));
      }
    }
  }, intervalMs);
}

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => {
  console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ");
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
bot.action(/pick_hour:(\d+):(\d+)/, async (ctx) => {
  try {
    const taskIdx = parseInt(ctx.match[1], 10);
    const hour = parseInt(ctx.match[2], 10);
    const userId = ctx.from.id;
    const user = userTasks[userId];
    if (!user || !user.tasks || !user.tasks[taskIdx]) {
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const task = user.tasks[taskIdx];
    // clear existing
    clearTaskReminder(task);
    // compute ms until next occurrence of given hour
    const now = new Date();
    const next = new Date(now);
    next.setHours(hour, 0, 0, 0);
    if (next <= now) next.setDate(next.getDate() + 1);
    const msUntil = next - now;
    task.reminderLabel = `${hour.toString().padStart(2, '0')}:00 (—â–æ–¥–Ω—è)`;
    task.reminderSchedule = { type: 'daily_hour', hour };
    // set a timeout for first occurrence, then interval every 24h
    task.reminderTimeoutId = setTimeout(() => {
      ctx.telegram.sendMessage(userId, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${getTaskText(task)}\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help`, {
        reply_markup: { inline_keyboard: [[{ text: '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ', callback_data: `task_action:complete:${taskIdx}` }, { text: '‚è∏Ô∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data: `task_action:stop:${taskIdx}` }, { text: 'üîÅ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –¥–∞–ª—ñ', callback_data: `task_action:keep:${taskIdx}` }]] }
      });
      // set interval for next days
      task.reminderIntervalId = setInterval(() => {
        ctx.telegram.sendMessage(userId, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${getTaskText(task)}\n\n–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π ‚Äî /help`, {
          reply_markup: { inline_keyboard: [[{ text: '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ', callback_data: `task_action:complete:${taskIdx}` }, { text: '‚è∏Ô∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data: `task_action:stop:${taskIdx}` }, { text: 'üîÅ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –¥–∞–ª—ñ', callback_data: `task_action:keep:${taskIdx}` }]] }
        });
      }, 24 * 60 * 60 * 1000);
    }, msUntil);
    await ctx.editMessageReplyMarkup();
    await ctx.reply(withFooter(`–¢–∞–π–º–µ—Ä —â–æ–¥–µ–Ω–Ω–æ –æ ${hour.toString().padStart(2, '0')}:00 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`));
    await ctx.answerCbQuery('–ì–æ–¥–∏–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (err) {
    console.error('pick_hour handler err', err);
  }
});